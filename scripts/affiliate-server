#! /usr/bin/env python
"""Run affiliate server.

Usage:

start affiliate-server using dev webserver:

    ./scripts/affiliate-server openlibrary.yml 31337

start affiliate-server as fastcgi:

    ./scripts/affiliate-server openlibrary.yml fastcgi 31337

start affiliate-server using gunicorn webserver:

    ./scripts/affiliate-server openlibrary.yml --gunicorn -b 0.0.0.0:31337

"""

import logging
import os
import sys
import web
import yaml

from openlibrary.core.vendors import AmazonAPI
import _init_path

logger = logging.getLogger("affiliate-server")

def runfcgi(func, addr=('localhost', 8000)):
    """Runs a WSGI function as a FastCGI pre-fork server."""
    config = dict(web.config.get("fastcgi", {}))

    mode = config.pop("mode", None)
    if mode == "prefork":
        import flup.server.fcgi_fork as flups
    else:
        import flup.server.fcgi as flups

    return flups.WSGIServer(func, multiplexed=True, bindAddress=addr, **config).run()

web.ol_config = web.storify({})
web.config.debug = False
web.wsgi.runfcgi = runfcgi

urls = (
    '/isbn/([0-9X,]+)', 'Index'
)

app = web.application(urls, locals())

class Index:
    def GET(self, isbns, threshold=5):
        if not web.amazon_api:
            return {"error": "not_configured"}

        isbns = isbns.split(',')
        hits, misses = {}, []
        for isbn in isbns:
            #hits[isbn] = web.amazon_cache[isbn] if isbn in web.amazon_cache else misses.append(isbn)
            if isbn in web.amazon_cache:
                hits[isbn] = web.amazon_cache[isbn]
            else:
                misses.append(isbn)

        web.amazon_queue.update(misses)
        if misses:
            if len(web.amazon_queue) < threshold:
                return {
                    "status": "submitted",
                    "threshold": threshold,
                    "hits": hits,
                    "queue": web.amazon_queue,
                    "waitlist": max(len(web.amazon_queue) - threshold, 0)
                }
            try:
                queue = list(web.amazon_queue)
                web.amazon_queue = set()
                products = web.amazon_api.get_products(queue, serialize=True)
                for product in products:
                    web.amazon_cache[product['isbn_10'][0]] = product
                    hits[product['isbn_10'][0]] = product
            except Exception:
                logger.exception("amazon_api.get_product({}, serialize=True)".format(web.amazon_queue))
                return {"status": "error"}
        return {
            "status": "success",
            "hits": hits
        }


def load_config(configfile):
    with open(configfile) as in_file:
        d = yaml.safe_load(in_file)
    for k, v in d.items():
        setattr(web.ol_config, k, v)

    if 'fastcgi' in d:
        web.config.fastcgi = d['fastcgi']

    try:
        web.amazon_api = AmazonAPI(
            web.ol_config.amazon_api.get('key'),
            web.ol_config.amazon_api.get('secret'),
            web.ol_config.amazon_api.get('id'),
            throttling=0.5
        )
        web.amazon_cache = {}
        web.amazon_queue = set()
    except AttributeError as e:
        print(e)
        web.amazon_api = None


def init_sentry(app):
    from openlibrary.utils.sentry import Sentry
    sentry = Sentry(getattr(web.ol_config, 'sentry', {}))
    if sentry.enabled:
        sentry.init()
        sentry.bind_to_webpy_app(app)

def setup_env():
    # make sure PYTHON_EGG_CACHE is writable
    os.environ['PYTHON_EGG_CACHE'] = "/tmp/.python-eggs"

    # required when run as fastcgi
    os.environ['REAL_SCRIPT_NAME'] = ""

def start_server():
    sysargs = sys.argv[1:]
    configfile, args = sysargs[0], sysargs[1:]

    # type: (str) -> None
    load_config(configfile)

    # sentry could be loaded here
    # init_sentry(app)

    sys.argv = [sys.argv[0]] + list(args)
    app.run()
    
def start_gunicorn_server():
    """Starts the affiliate server using gunicorn server.
    """
    from gunicorn.app.base import Application
    
    configfile = sys.argv.pop(1)
    
    class WSGIServer(Application):
        def init(self, parser, opts, args):
            pass
            
        def load(self):
            load_config(configfile)
            # init_setry(app)
            return app.wsgifunc(https_middleware)
            
    WSGIServer("%prog openlibrary.yml --gunicorn [options]").run()


def https_middleware(app):
    """Hack to support https even when the app server http only.

    The nginx configuration has changed to add the following setting:

        proxy_set_header X-Scheme $scheme;

    Using that value to overwrite wsgi.url_scheme in the WSGI environ,
    which is used by all redirects and other utilities.
    """
    def wrapper(environ, start_response):
        if environ.get('HTTP_X_SCHEME') == 'https':
            environ['wsgi.url_scheme'] = 'https'
        return app(environ, start_response)
    return wrapper
    
if __name__ == "__main__":
    setup_env()
    if "--gunicorn" in sys.argv:
        sys.argv.pop(sys.argv.index("--gunicorn"))        
        start_gunicorn_server()
    else:
        start_server()
