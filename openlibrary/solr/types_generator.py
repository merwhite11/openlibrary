#!/usr/bin/env python
import os
from typing import List, Set

root = os.path.dirname(__file__)
OVERRIDES = {
    'type': "Literal['work', 'author', 'subject']"
}


def generate():
    """This function generates the types.py file."""
    import xml.etree.ElementTree as ET
    # read the managed-schema xml file
    solr_schema = ET.parse(os.path.join(root, '../../conf/solr/conf/managed-schema'))
    python_fields: List[str] = []
    seen_names: Set[str] = set()
    for field in solr_schema.getroot().findall('field'):
        name = field.get('name')
        if name.startswith('_'):
            continue

        required = field.get('required') == 'true'
        typ = field.get('type')
        multivalued = field.get('multiValued') == 'true'
        type_map = {
            'pint': 'int',
            'string': 'str',
            'text_en_splitting': 'str',
            'text_general': 'str',
            'text_international': 'str',
            'boolean': 'bool',
        }

        if name in OVERRIDES:
            python_type = OVERRIDES[name]
        else:
            python_type = type_map[typ]
            if multivalued:
                python_type = f"List[{python_type}]"
            if not required:
                python_type = f"Optional[{python_type}]"

        seen_names.add(name)
        python_fields.append(f"    {name}: {python_type}")

    for key in set(OVERRIDES.keys()) - seen_names:
        python_fields.append(f"    {key}: {OVERRIDES[key]}")

    body = '\n'.join(python_fields)
    python = f"""# This file is auto-generated by types_generator.py
from typing import TypedDict, Optional, List, Literal


class SolrDocument(TypedDict):
{body}"""

    return python


if __name__ == '__main__':
    print(generate())
