version: "3"
services:
  web:
    image: oldev:latest
    environment:
      - PYENV_VERSION=${PYENV_VERSION:-}
      # Branch to pull infogami from. Leave blank to use production infogami for py2, master for py3
      # Set to "local" to not pull anything and use whatever you've got locally in vendor/infogami
      # ^ NOTE: Also need to uncomment the infogami volume mount (below) if doing this!
      - INFOGAMI=${INFOGAMI:-}
    build:
      context: .
      dockerfile: docker/Dockerfile.oldev
    ports:
      - 8080:80
      - 7000:7000
      - 3000:3000
    volumes:
      # Persistent volume mount for installed git submodules
      - ol-vendor:/openlibrary/vendor
      # Persistent volume mount for generated css and js
      - ol-build:/openlibrary/static/build
      # Persistent volume mount for node_modules
      - ol-nodemodules:/openlibrary/node_modules
      # The above volume mounts are required so that the local dev bind mount below
      # does not clobber the data generated inside the image / container
      - .:/openlibrary
    networks:
      - webnet
  solr:
    image: olsolr:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.olsolr
    environment:
      - ENV=${ENV:-dev}
    ports:
      - 8983:8983
    volumes:
      - solr-data:/var/lib/solr/data
    networks:
      - webnet
  memcached:
    image: memcached
    networks:
      - webnet
  covers:
    image: oldev:latest
    environment:
      - PYENV_VERSION=${PYENV_VERSION:-}
      - INFOGAMI=${INFOGAMI:-}
    build:
      context: .
      dockerfile: docker/Dockerfile.oldev
    command: docker/ol-covers-start.sh
    ports:
      - 8081:8081
    volumes:
      - ol-vendor:/openlibrary/vendor
      - .:/openlibrary
    networks:
      - webnet
networks:
  webnet:
volumes:
  solr-data:
  ol-vendor:
  ol-build:
  ol-nodemodules:
