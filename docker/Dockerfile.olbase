FROM ubuntu:xenial

ENV LANG en_US.UTF-8

# required for postgres
ENV LC_ALL POSIX

# add openlibrary users
RUN groupadd --system openlibrary \
  && useradd --no-log-init --system --gid openlibrary --create-home openlibrary \
  && useradd --no-log-init --system --gid openlibrary solrupdater

# Misc OL dependencies
RUN apt-get -qq update && apt-get install -y \
    nginx \
    authbind \
    postgresql \
    build-essential \
    git \
    libpq-dev \
    libxml2-dev \
    libxslt-dev \
    libffi-dev \
    curl \
    screen

# Install LTS version of node.js
RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - \
    && apt-get install -y nodejs

# Install pyenv
# Python build deps: https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites
RUN apt-get -qq update && apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git

# Install latest pyenv (https://github.com/pyenv/pyenv-installer)
USER openlibrary
RUN curl https://pyenv.run | bash && \
    echo '\nexport PATH="/home/openlibrary/.pyenv/bin:$PATH"\neval "$(pyenv init -)"\neval "$(pyenv virtualenv-init -)"' >> /home/openlibrary/.bashrc
ENV PYENV_ROOT /home/openlibrary/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN pyenv update && pyenv install 2.7.6
RUN pyenv update && pyenv install 3.8.5
RUN pyenv global 2.7.6 3.8.5
RUN pyenv rehash

# Update pip to match production (Jan 2020)
RUN python2 -m pip install --upgrade --disable-pip-version-check pip==19.3.1

USER root
# Add pyenv to root's bashrc as well
RUN echo '\nexport PATH="/home/openlibrary/.pyenv/bin:$PATH"\neval "$(pyenv init -)"\neval "$(pyenv virtualenv-init -)"' >> /root/.bashrc
# enable users to bind to port 80
RUN touch /etc/authbind/byport/80 && chmod 777 /etc/authbind/byport/80

# Setup nginx
RUN ln -s /openlibrary/conf/nginx/sites-available/openlibrary.conf /etc/nginx/sites-available/ \
    && ln -s /etc/nginx/sites-available/openlibrary.conf /etc/nginx/sites-enabled/

RUN mkdir -p /var/log/openlibrary /var/lib/openlibrary \
    && chown openlibrary:openlibrary /var/log/openlibrary /var/lib/openlibrary

RUN mkdir /openlibrary && chown openlibrary:openlibrary /openlibrary
WORKDIR /openlibrary

USER openlibrary
COPY requirements*.txt ./
RUN python2 -m pip install --disable-pip-version-check --default-timeout=100 -r requirements_common.txt
RUN python3 -m pip install --default-timeout=100 -r requirements_common.txt

COPY package*.json ./
RUN npm ci

COPY --chown=openlibrary:openlibrary . /openlibrary

RUN ln -s vendor/infogami/infogami infogami
# run make to initialize git submodules, build css and js files
RUN make

# Expose Open Library and Infobase
EXPOSE 80 7000
CMD authbind --deep scripts/openlibrary-server conf/openlibrary.yml \
    --gunicorn --workers 4 --timeout 180 --bind :80
